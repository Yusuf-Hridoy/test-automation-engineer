{
	"info": {
		"_postman_id": "aaa71d87-f66c-4e43-8f5b-738cb402cc4d",
		"name": "Fruit store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30729872"
	},
	"item": [
		{
			"name": "Get product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"  pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "http://localhost:3000/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product by Id",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "http://localhost:3000/products/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Item created\", function () {\r",
							"  pm.response.to.have.status(201)\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Litchi\",\n    \"description\": \"A fruit that is good for the health\",\n    \"price\": 12\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code is 201 or 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct product data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    \r",
							"    pm.expect(response).to.have.property(\"product_id\").that.is.a(\"number\");\r",
							"    pm.expect(response).to.have.property(\"quantity\").that.equals(1);\r",
							"    pm.expect(response).to.have.property(\"product_name\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"price\").that.equals(100);\r",
							"    pm.expect(response).to.have.property(\"created_at\").that.is.a(\"string\");\r",
							"    pm.expect(response).to.have.property(\"updated_at\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"console.log(\"Response received:\", pm.response.json());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"product_id\": 3,\n    \"quantity\": 1,\n    \"product_name\": \"orange\",\n    \"price\": 100,\n    \"created_at\": \"2025-05-04T05:40:02.518Z\",\n    \"updated_at\": \"2025-05-04T05:40:02.518Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Check for error response\", function () {\r",
							"    pm.expect(pm.response.code).to.not.equal(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "http://localhost:3000/orders",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete order",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "http://localhost:3000/orders/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"orders",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Product with ID 2 is deleted\", function () {\r",
							"    \r",
							"    pm.sendRequest({\r",
							"        url: `${pm.environment.get(\"baseUrl\")}/products/2`,\r",
							"        method: 'DELETE' // Changed method to DELETE\r",
							"    }, function (err, response) {\r",
							"        if (err) {\r",
							"            throw new Error(`Error in DELETE request: ${err}`);\r",
							"        }\r",
							"        \r",
							"        pm.expect(response.code).to.equal(404, \"Product should not exist after deletion\");\r",
							"        \r",
							"        if (response.code === 200) {\r",
							"            const responseBody = response.json();\r",
							"            pm.expect(responseBody).to.not.have.property(\"product_id\", 2);\r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					}
				],
				"url": {
					"raw": "http://localhost:3000/products/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"products",
						"2"
					]
				}
			},
			"response": []
		}
	]
}